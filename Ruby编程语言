##2.3 文件结构

__shebang：__ 注释必须是第一行

__coding：__ 若不含有有__shebang__注释，这个必须出现在第一行

__ __END__: __ 

__require：__ 载入其他文件的代码，可以根据搜索路径来查找特定的代码模块，并且保证不会重复载入给定的模块。

	#！/usr/bin/ruby -w
	# -*- coding: utf-8 -*-
	require 'socket'

	...
	__END__
	...


##2.4 程序的编码

 ruby采用ASCII字符集定义它的词法规则。

 所有的Ruby关键字都是用ASCII字符编写的，所有的操作符和其他标点符号也都是取自ASCII字符集。
###2.4.1 指定程序所使用的编码
在文件开头放入一个特殊的“编码注释（coding comment）”指定编码
	
	#coding：utf-8

这个注释必须完全使用ASCII字符来编写，字符串coding后__必须接一个“：”/“=”（冒号或等号）__，然后再接期望的编码名称（该名称不能包含空格，也不能包含除__连字符__和__下划线__之外的标点符号）。
在冒号或等号的两边允许有空白符存在，而且字符串coding可以包含任意的前缀，整个注释，包含coding字符串和编码名称，都__不区分大小写__，可以随意编写。

Emacs用户这样编写

	# -*- coding:utf-8 -*-
vi用户这样编写

	# vi:set fileencoding=utf-8 :


特例：

如果文件的头三个字节是 __OxEF OxBB OxBF__，那边该编码格式就是UTF-8.这个三个字节被称为__BOM(byte order mark)__

###2.4.2 源编码和默认外部编码

默认外部编码：是基于你的电脑的区域设置来进行设置的。

查询默认外部编码，返回一个encoding对象

	encoding.default_external
获得从区域设置得到的字符编码的名称

	encoding.locale_charmap



##2.5 Ruby程序的运行

Ruby解释器首先执行任何BUGIN块，然后再从文件的第一行开始执行，遇到一个类定义时，它就执行该语句，产生一个新类；遇到一个方法定义时，它执行该定义，产生一个新方法。在程序的后续部分里，解释器可能会碰到并执行一个对该方法的调用，此调用将执行该方法体内的语句，直到发生下面描述的各种情况。
* 它执行了一个导致Ruby程序终结的语句
* 它到达了文件的结尾
* 它读入一行代码，此代码用____END____标示了文件的逻辑结尾

通常情况下（除非调用了exit！方法），Ruby解释器在退出之前会执行任何END语句，以及任何通过at_exit函数注册过的“关闭钩子（shutdown hook）”代码。
